<!DOCTYPE html>
<html lang="en">
  <head></head>
  <body>
    <p>
      FIRST NAME:<%= `${y}` %><br />
      LAST NAME:<%= `${z}` %>
    </p>
    <form
      action="/updatePatient/<%= `${x}` %>"
      onsubmit="return onSubmit(this)"
      method="POST"
    >
    
      <div>
        <canvas id="signature" width="300" height="100"></canvas>
      </div>
      <div>Therapist Signature<input type="hidden" name="signature" /></div>
      <hr />
      <div>
        <canvas id="signaturep" width="300" height="100"></canvas>
      </div>
      <hr />
      <div>Patient Signature<input type="hidden" name="signaturep" /></div>

      <input type="submit" value="Submit" />
    </form>

    <script>
      // patients sig
      var canvasp = document.getElementById("signaturep");
      var ctxp = canvasp.getContext("2d");
      var drawingp = false;
      var prevXp, prevYp;
      var currXp, currYp;
      var signaturep = document.getElementsByName("signaturep")[0];

      canvasp.addEventListener("mousemove", drawP);
      canvasp.addEventListener("mouseup", stopP);
      canvasp.addEventListener("mousedown", startP);
      function startP(e) {
        drawingp = true;
        console.log(drawingp);
      }
      function stopP() {
        drawingp = false;
        prevXp = prevYp = null;
        signaturep.value = canvasp.toDataURL();
      }
      function drawP(e) {
        console.log(e);
        console.log("H!");
        if (!drawingp) {
          return;
        }

        // Test for touchmove event, this requires another property.
        var clientXp =
          e.type === "touchmove" ? e.touches[0].clientXp : e.clientX;
        var clientYp =
          e.type === "touchmove" ? e.touches[0].clientYp : e.clientY;

        currXp = clientXp - canvasp.offsetLeft;

        currYp = clientYp - canvasp.offsetTop;
        if (!prevXp && !prevYp) {
          prevXp = currXp;
          prevYp = currYp;
        }

        ctxp.beginPath();
        ctxp.moveTo(prevXp, prevYp);
        ctxp.lineTo(currXp, currYp);
        ctxp.strokeStyle = "black";
        ctxp.lineWidth = 2;
        ctxp.stroke();
        ctxp.closePath();

        prevXp = currXp;
        prevYp = currYp;
      }
      //       function onSubmit(){
      //         sig = req.body.signature;
      //   var base64Data = req.body.signature.replace(/^data:image\/png;base64,/, "");
      //   console.log(base64Data);
      //   require("fs").writeFile(`${req.params.id}.png`, base64Data, 'base64', function (err) {
      //     console.log(err);
      //   });
      //   setSig({ signature: sig, p_id: req.params.id })
      //       }
    </script>
  </body>
</html>
